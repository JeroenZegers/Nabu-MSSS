Help on module matplotlib.pyplot in matplotlib:

NNAAMMEE
    matplotlib.pyplot - Provides a MATLAB-like plotting framework.

FFIILLEE
    /usr/local/lib/python2.7/dist-packages/matplotlib/pyplot.py

DDEESSCCRRIIPPTTIIOONN
    :mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.
    This is convenient for interactive work, but for programming it
    is recommended that the namespaces be kept separate, e.g.::
    
        import numpy as np
        import matplotlib.pyplot as plt
    
        x = np.arange(0, 5, 0.1);
        y = np.sin(x)
        plt.plot(x, y)

FFUUNNCCTTIIOONNSS
    aaccoorrrr(x, hold=None, data=None, **kwargs)
        Plot the autocorrelation of `x`.
        
        Parameters
        ----------
        
        x : sequence of scalar
        
        hold : boolean, optional, *deprecated*, default: True
        
        detrend : callable, optional, default: `mlab.detrend_none`
            x is detrended by the `detrend` callable. Default is no
            normalization.
        
        normed : boolean, optional, default: True
            if True, input vectors are normalised to unit length.
        
        usevlines : boolean, optional, default: True
            if True, Axes.vlines is used to plot the vertical lines from the
            origin to the acorr. Otherwise, Axes.plot is used.
        
        maxlags : integer, optional, default: 10
            number of lags to show. If None, will return all 2 * len(x) - 1
            lags.
        
        Returns
        -------
        (lags, c, line, b) : where:
        
          - `lags` are a length 2`maxlags+1 lag vector.
          - `c` is the 2`maxlags+1 auto correlation vectorI
          - `line` is a `~matplotlib.lines.Line2D` instance returned by
            `plot`.
          - `b` is the x-axis.
        
        Other parameters
        ----------------
        linestyle : `~matplotlib.lines.Line2D` prop, optional, default: None
            Only used if usevlines is False.
        
        marker : string, optional, default: 'o'
        
        Notes
        -----
        The cross correlation is performed with :func:`numpy.correlate` with
        `mode` = 2.
        
        Examples
        --------
        
        `~matplotlib.pyplot.xcorr` is top graph, and
        `~matplotlib.pyplot.acorr` is bottom graph.
        
        .. plot:: mpl_examples/pylab_examples/xcorr_demo.py
        
        .. note::
            In addition to the above described arguments, this function can take a
            **data** keyword argument. If such a **data** argument is given, the
            following arguments are replaced by **data[<arg>]**:
        
            * All arguments with the following names: 'x'.
    
    aannggllee__ssppeeccttrruumm(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, hold=None, data=None, **kwargs)
        Plot the angle spectrum.
        
        Call signature::
        
          angle_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,
                         pad_to=None, sides='default', **kwargs)
        
        Compute the angle spectrum (wrapped phase spectrum) of *x*.
        Data is padded to a length of *pad_to* and the windowing function
        *window* is applied to the signal.
        
        Parameters
        ----------
        x : 1-D array or sequence
            Array or sequence containing the data
        
        Fs : scalar
            The sampling frequency (samples per time unit).  It is used
            to calculate the Fourier frequencies, freqs, in cycles per time
            unit. The default value is 2.
        
        window : callable or ndarray
            A function or a vector of length *NFFT*. To create window
            vectors see :func:`window_hanning`, :func:`window_none`,
            :func:`numpy.blackman`, :func:`numpy.hamming`,
            :func:`numpy.bartlett`, :func:`scipy.signal`,
            :func:`scipy.signal.get_window`, etc. The default is
            :func:`window_hanning`.  If a function is passed as the
            argument, it must take a data segment as an argument and
            return the windowed version of the segment.
        
        sides : [ 'default' | 'onesided' | 'twosided' ]
            Specifies which sides of the spectrum to return.  Default gives the
            default behavior, which returns one-sided for real data and both
            for complex data.  'onesided' forces the return of a one-sided
            spectrum, while 'twosided' forces two-sided.
        
        pad_to : integer
            The number of points to which the data segment is padded when
            performing the FFT.  While not increasing the actual resolution of
            the spectrum (the minimum distance between resolvable peaks),
            this can give more points in the plot, allowing for more
            detail. This corresponds to the *n* parameter in the call to fft().
            The default is None, which sets *pad_to* equal to the length of the
            input signal (i.e. no padding).
        
        Fc : integer
            The center frequency of *x* (defaults to 0), which offsets
            the x extents of the plot to reflect the frequency range used
            when a signal is acquired and then filtered and downsampled to
            baseband.
        
        **kwargs :
            Keyword arguments control the :class:`~matplotlib.lines.Line2D`
            properties:
        
          agg_filter: unknown
          alpha: float (0.0 transparent through 1.0 opaque) 
          animated: [True | False] 
          antialiased or aa: [True | False] 
          axes: an :class:`~matplotlib.axes.Axes` instance 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          color or c: any matplotlib color 
          contains: a callable function 
          dash_capstyle: ['butt' | 'round' | 'projecting'] 
          dash_joinstyle: ['miter' | 'round' | 'bevel'] 
          dashes: sequence of on/off ink in points 
          drawstyle: ['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post'] 
          figure: a :class:`matplotlib.figure.Figure` instance 
          fillstyle: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none'] 
          gid: an id string 
          label: string or anything printable with '%s' conversion. 
          linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or lw: float value in points 
          marker: :mod:`A valid marker style <matplotlib.markers>`
          markeredgecolor or mec: any matplotlib color 
          markeredgewidth or mew: float value in points 
          markerfacecolor or mfc: any matplotlib color 
          markerfacecoloralt or mfcalt: any matplotlib color 
          markersize or ms: float 
          markevery: [None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]
          path_effects: unknown
          picker: float distance in points or callable pick function ``fn(artist, event)`` 
          pickradius: float distance in points 
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          solid_capstyle: ['butt' | 'round' |  'projecting'] 
          solid_joinstyle: ['miter' | 'round' | 'bevel'] 
          transform: a :class:`matplotlib.transforms.Transform` instance 
          url: a url string 
          visible: [True | False] 
          xdata: 1D array 
          ydata: 1D array 
          zorder: any number 
        
        Returns
        -------
        spectrum : 1-D array
            The values for the angle spectrum in radians (real valued)
        
        freqs : 1-D array
            The frequencies corresponding to the elements in *spectrum*
        
        line : a :class:`~matplotlib.lines.Line2D` instance
            The line created by this function
        
        Examples
        --------
        .. plot:: mpl_examples/pylab_examples/spectrum_demo.py
        
        See Also
        --------
        :func:`magnitude_spectrum`
            :func:`angle_spectrum` plots the magnitudes of the corresponding
            frequencies.
        
        :func:`phase_spectrum`
            :func:`phase_spectrum` plots the unwrapped version of this
            function.
        
        :func:`specgram`
            :func:`specgram` can plot the angle spectrum of segments within the
            signal in a colormap.
        
        .. note::
            In addition to the above described arguments, this function can take a
            **data** keyword argument. If such a **data** argument is given, the
            following arguments are replaced by **data[<arg>]**:
        
            * All arguments with the following names: 'x'.
    
    aannnnoottaattee(*args, **kwargs)
        Annotate the point ``xy`` with text ``s``.
        
        Additional kwargs are passed to `~matplotlib.text.Text`.
        
        Parameters
        ----------
        
        s : str
            The text of the annotation
        
        xy : iterable
            Length 2 sequence specifying the *(x,y)* point to annotate
        
        xytext : iterable, optional
            Length 2 sequence specifying the *(x,y)* to place the text
            at.  If None, defaults to ``xy``.
        
        xycoords : str, Artist, Transform, callable or tuple, optional
        
            The coordinate system that ``xy`` is given in.
        
            For a `str` the allowed values are:
        
            =================   ===============================================
            Property            Description
            =================   ===============================================
            'figure points'     points from the lower left of the figure
            'figure pixels'     pixels from the lower left of the figure
            'figure fraction'   fraction of figure from lower left
            'axes points'       points from lower left corner of axes
            'axes pixels'       pixels from lower left corner of axes
            'axes fraction'     fraction of axes from lower left
            'data'              use the coordinate system of the object being
                                annotated (default)
            'polar'             *(theta,r)* if not native 'data' coordinates
            =================   ===============================================
        
            If a `~matplotlib.artist.Artist` object is passed in the units are
            fraction if it's bounding box.
        
            If a `~matplotlib.transforms.Transform` object is passed
            in use that to transform ``xy`` to screen coordinates
        
            If a callable it must take a
            `~matplotlib.backend_bases.RendererBase` object as input
            and return a `~matplotlib.transforms.Transform` or
            `~matplotlib.transforms.Bbox` object
        
            If a `tuple` must be length 2 tuple of str, `Artist`,
            `Transform` or callable objects.  The first transform is
            used for the *x* coordinate and the second for *y*.
        
            See :ref:`plotting-guide-annotation` for more details.
        
            Defaults to ``'data'``
        
        textcoords : str, `Artist`, `Transform`, callable or tuple, optional
            The coordinate system that ``xytext`` is given, which
            may be different than the coordinate system used for
            ``xy``.
        
            All ``xycoords`` values are valid as well as the following
            strings:
        
            =================   =========================================
            Property            Description
            =================   =========================================
            'offset points'     offset (in points) from the *xy* value
            'offset pixels'     offset (in pixels) from the *xy* value
            =================   =========================================
        
            defaults to the input of ``xycoords``
        
        arrowprops : dict, optional
            If not None, properties used to draw a
            `~matplotlib.patches.FancyArrowPatch` arrow between ``xy`` and
            ``xytext``.
        
            If `arrowprops` does not contain the key ``'arrowstyle'`` the
            allowed keys are:
        
            ==========   ======================================================
            Key          Description
            ==========   ======================================================
            width        the width of the arrow in points
            headwidth    the width of the base of the arrow head in points
            headlength   the length of the arrow head in points
            shrink       fraction of total length to 'shrink' from both ends
            ?            any key to :class:`matplotlib.patches.FancyArrowPatch`
            ==========   ======================================================
        
            If the `arrowprops` contains the key ``'arrowstyle'`` the
            above keys are forbidden.  The allowed values of
            ``'arrowstyle'`` are:
        
            ============   =============================================
            Name           Attrs
            ============   =============================================
            ``'-'``        None
            ``'->'``       head_length=0.4,head_width=0.2
            ``'-['``       widthB=1.0,lengthB=0.2,angleB=None
            ``'|-|'``      widthA=1.0,widthB=1.0
            ``'-|>'``      head_length=0.4,head_width=0.2
            ``'<-'``       head_length=0.4,head_width=0.2
            ``'<->'``      head_length=0.4,head_width=0.2
            ``'<|-'``      head_length=0.4,head_width=0.2
            ``'<|-|>'``    head_length=0.4,head_width=0.2
            ``'fancy'``    head_length=0.4,head_width=0.4,tail_width=0.4
            ``'simple'``   head_length=0.5,head_width=0.5,tail_width=0.2
            ``'wedge'``    tail_width=0.3,shrink_factor=0.5
            ============   =============================================
        
            Valid keys for `~matplotlib.patches.FancyArrowPatch` are:
        
            ===============  ==================================================
            Key              Description
            ===============  ==================================================
            arrowstyle       the arrow style
            connectionstyle  the connection style
            relpos           default is (0.5, 0.5)
            patchA           default is bounding box of the text
            patchB           default is None
            shrinkA          default is 2 points
            shrinkB          default is 2 points
            mutation_scale   default is text size (in points)
            mutation_aspect  default is 1.
            ?                any key for :class:`matplotlib.patches.PathPatch`
            ===============  ==================================================
        
            Defaults to None
        
        annotation_clip : bool, optional
            Controls the visibility of the annotation when it goes
            outside the axes area.
        
            If `True`, the annotation will only be drawn when the
            ``xy`` is inside the axes. If `False`, the annotation will
            always be drawn regardless of its position.
        
            The default is `None`, which behave as `True` only if
            *xycoords* is "data".
        
        Returns
        -------
        Annotation
    
    aarrrrooww(x, y, dx, dy, hold=None, **kwargs)
        Add an arrow to the axes.
        
        Draws arrow on specified axis from (`x`, `y`) to (`x` + `dx`,
        `y` + `dy`). Uses FancyArrow patch to construct the arrow.
        
        Parameters
        ----------
        x : float
            X-coordinate of the arrow base
        y : float
            Y-coordinate of the arrow base
        dx : float
            Length of arrow along x-coordinate
        dy : float
            Length of arrow along y-coordinate
        
        Returns
        -------
        a : FancyArrow
            patches.FancyArrow object
        
        Other Parameters
        -----------------
        Optional kwargs (inherited from FancyArrow patch) control the arrow
        construction and properties:
        
        Constructor arguments
          *width*: float (default: 0.001)
            width of full arrow tail
        
          *length_includes_head*: [True | False] (default: False)
            True if head is to be counted in calculating the length.
        
          *head_width*: float or None (default: 3*width)
            total width of the full arrow head
        
          *head_length*: float or None (default: 1.5 * head_width)
            length of arrow head
        
          *shape*: ['full', 'left', 'right'] (default: 'full')
            draw the left-half, right-half, or full arrow
        
          *overhang*: float (default: 0)
            fraction that the arrow is swept back (0 overhang means
            triangular shape). Can be negative or greater than one.
        
          *head_starts_at_zero*: [True | False] (default: False)
            if True, the head starts being drawn at coordinate 0
            instead of ending at coordinate 0.
        
        Other valid kwargs (inherited from :class:`Patch`) are:
          agg_filter: unknown
          alpha: float or None 
          animated: [True | False] 
          antialiased or aa: [True | False]  or None for default 
          axes: an :class:`~matplotlib.axes.Axes` instance 
          capstyle: ['butt' | 'round' | 'projecting'] 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          color: matplotlib color spec
          contains: a callable function 
          edgecolor or ec: mpl color spec, None, 'none', or 'auto' 
          facecolor or fc: mpl color spec, or None for default, or 'none' for no color 
          figure: a :class:`matplotlib.figure.Figure` instance 
          fill: [True | False] 
          gid: an id string 
          hatch: ['/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*'] 
          joinstyle: ['miter' | 'round' | 'bevel'] 
          label: string or anything printable with '%s' conversion. 
          linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or lw: float or None for default 
          path_effects: unknown
          picker: [None|float|boolean|callable] 
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          transform: :class:`~matplotlib.transforms.Transform` instance 
          url: a url string 
          visible: [True | False] 
          zorder: any number 
        
        Notes
        -----
        The resulting arrow is affected by the axes aspect ratio and limits.
        This may produce an arrow whose head is not square with its stem. To
        create an arrow whose head is square with its stem, use
        :meth:`annotate` for example::
        
            ax.annotate("", xy=(0.5, 0.5), xytext=(0, 0),
                arrowprops=dict(arrowstyle="->"))
        
        Examples
        --------
        
        .. plot:: mpl_examples/pylab_examples/arrow_demo.py
    
    aauuttoossccaallee(enable=True, axis=u'both', tight=None)
        Autoscale the axis view to the data (toggle).
        
        Convenience method for simple axis view autoscaling.
        It turns autoscaling on or off, and then,
        if autoscaling for either axis is on, it performs
        the autoscaling on the specified axis or axes.
        
        *enable*: [True | False | None]
            True (default) turns autoscaling on, False turns it off.
            None leaves the autoscaling state unchanged.
        
        *axis*: ['x' | 'y' | 'both']
            which axis to operate on; default is 'both'
        
        *tight*: [True | False | None]
            If True, set view limits to data limits;
            if False, let the locator and margins expand the view limits;
            if None, use tight scaling if the only artist is an image,
            otherwise treat *tight* as False.
            The *tight* setting is retained for future autoscaling
            until it is explicitly changed.
        
        
        Returns None.
    
    aauuttuummnn()
        set the default colormap to autumn and apply to current image if any.
        See help(colormaps) for more information
    
    aaxxeess(*args, **kwargs)
        Add an axes to the figure.
        
        The axes is added at position *rect* specified by:
        
        - ``axes()`` by itself creates a default full ``subplot(111)`` window axis.
        
        - ``axes(rect, facecolor='w')`` where *rect* = [left, bottom, width,
          height] in normalized (0, 1) units.  *facecolor* is the background
          color for the axis, default white.
        
        - ``axes(h)`` where *h* is an axes instance makes *h* the current
          axis.  An :class:`~matplotlib.axes.Axes` instance is returned.
        
        =========   ==============   ==============================================
        kwarg       Accepts          Description
        =========   ==============   ==============================================
        facecolor   color            the axes background color
        frameon     [True|False]     display the frame?
        sharex      otherax          current axes shares xaxis attribute
                                     with otherax
        sharey      otherax          current axes shares yaxis attribute
                                     with otherax
        polar       [True|False]     use a polar axes?
        aspect      [str | num]      ['equal', 'auto'] or a number.  If a number
                                     the ratio of x-unit/y-unit in screen-space.
                                     Also see
                                     :meth:`~matplotlib.axes.Axes.set_aspect`.
        =========   ==============   ==============================================
        
        Examples:
        
        * :file:`examples/pylab_examples/axes_demo.py` places custom axes.
        * :file:`examples/pylab_examples/shared_axis_demo.py` uses
          *sharex* and *sharey*.
    
    aaxxhhlliinnee(y=0, xmin=0, xmax=1, hold=None, **kwargs)
        Add a horizontal line across the axis.
        
        Parameters
        ----------
        y : scalar, optional, default: 0
            y position in data coordinates of the horizontal line.
        
        xmin : scalar, optional, default: 0
            Should be between 0 and 1, 0 being the far left of the plot, 1 the
            far right of the plot.
        
        xmax : scalar, optional, default: 1
            Should be between 0 and 1, 0 being the far left of the plot, 1 the
            far right of the plot.
        
        Returns
        -------
        :class:`~matplotlib.lines.Line2D`
        
        Notes
        -----
        kwargs are passed to :class:`~matplotlib.lines.Line2D` and can be used
        to control the line properties.
        
        Examples
        --------
        
        * draw a thick red hline at 'y' = 0 that spans the xrange::
        
            >>> axhline(linewidth=4, color='r')
        
        * draw a default hline at 'y' = 1 that spans the xrange::
        
            >>> axhline(y=1)
        
        * draw a default hline at 'y' = .5 that spans the middle half of
          the xrange::
        
            >>> axhline(y=.5, xmin=0.25, xmax=0.75)
        
        Valid kwargs are :class:`~matplotlib.lines.Line2D` properties,
        with the exception of 'transform':
        
          agg_filter: unknown
          alpha: float (0.0 transparent through 1.0 opaque) 
          animated: [True | False] 
          antialiased or aa: [True | False] 
          axes: an :class:`~matplotlib.axes.Axes` instance 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          color or c: any matplotlib color 
          contains: a callable function 
          dash_capstyle: ['butt' | 'round' | 'projecting'] 
          dash_joinstyle: ['miter' | 'round' | 'bevel'] 
          dashes: sequence of on/off ink in points 
          drawstyle: ['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post'] 
          figure: a :class:`matplotlib.figure.Figure` instance 
          fillstyle: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none'] 
          gid: an id string 
          label: string or anything printable with '%s' conversion. 
          linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or lw: float value in points 
          marker: :mod:`A valid marker style <matplotlib.markers>`
          markeredgecolor or mec: any matplotlib color 
          markeredgewidth or mew: float value in points 
          markerfacecolor or mfc: any matplotlib color 
          markerfacecoloralt or mfcalt: any matplotlib color 
          markersize or ms: float 
          markevery: [None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]
          path_effects: unknown
          picker: float distance in points or callable pick function ``fn(artist, event)`` 
          pickradius: float distance in points 
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          solid_capstyle: ['butt' | 'round' |  'projecting'] 
          solid_joinstyle: ['miter' | 'round' | 'bevel'] 
          transform: a :class:`matplotlib.transforms.Transform` instance 
          url: a url string 
          visible: [True | False] 
          xdata: 1D array 
          ydata: 1D array 
          zorder: any number 
        
        See also
        --------
        axhspan : for example plot and source code
    
    aaxxhhssppaann(ymin, ymax, xmin=0, xmax=1, hold=None, **kwargs)
        Add a horizontal span (rectangle) across the axis.
        
        Draw a horizontal span (rectangle) from *ymin* to *ymax*.
        With the default values of *xmin* = 0 and *xmax* = 1, this
        always spans the xrange, regardless of the xlim settings, even
        if you change them, e.g., with the :meth:`set_xlim` command.
        That is, the horizontal extent is in axes coords: 0=left,
        0.5=middle, 1.0=right but the *y* location is in data
        coordinates.
        
        Parameters
        ----------
        ymin : float
               Lower limit of the horizontal span in data units.
        ymax : float
               Upper limit of the horizontal span in data units.
        xmin : float, optional, default: 0
               Lower limit of the vertical span in axes (relative
               0-1) units.
        xmax : float, optional, default: 1
               Upper limit of the vertical span in axes (relative
               0-1) units.
        
        Returns
        -------
        Polygon : `~matplotlib.patches.Polygon`
        
        Other Parameters
        ----------------
        kwargs : `~matplotlib.patches.Polygon` properties.
        
          agg_filter: unknown
          alpha: float or None 
          animated: [True | False] 
          antialiased or aa: [True | False]  or None for default 
          axes: an :class:`~matplotlib.axes.Axes` instance 
          capstyle: ['butt' | 'round' | 'projecting'] 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          color: matplotlib color spec
          contains: a callable function 
          edgecolor or ec: mpl color spec, None, 'none', or 'auto' 
          facecolor or fc: mpl color spec, or None for default, or 'none' for no color 
          figure: a :class:`matplotlib.figure.Figure` instance 
          fill: [True | False] 
          gid: an id string 
          hatch: ['/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*'] 
          joinstyle: ['miter' | 'round' | 'bevel'] 
          label: string or anything printable with '%s' conversion. 
          linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or lw: float or None for default 
          path_effects: unknown
          picker: [None|float|boolean|callable] 
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          transform: :class:`~matplotlib.transforms.Transform` instance 
          url: a url string 
          visible: [True | False] 
          zorder: any number 
        
        See Also
        --------
        axvspan : Add a vertical span (rectangle) across the axes.
        
        Examples
        --------
        .. plot:: mpl_examples/pylab_examples/axhspan_demo.py
    
    aaxxiiss(*v, **kwargs)
        Convenience method to get or set axis properties.
        
        Calling with no arguments::
        
          >>> axis()
        
        returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::
        
          >>> axis(v)
        
        sets the min and max of the x and y axes, with
        ``v = [xmin, xmax, ymin, ymax]``.::
        
          >>> axis('off')
        
        turns off the axis lines and labels.::
        
          >>> axis('equal')
        
        changes limits of *x* or *y* axis so that equal increments of *x*
        and *y* have the same length; a circle is circular.::
        
          >>> axis('scaled')
        
        achieves the same result by changing the dimensions of the plot box instead
        of the axis data limits.::
        
          >>> axis('tight')
        
        changes *x* and *y* axis limits such that all data is shown. If
        all data is already shown, it will move it to the center of the
        figure without modifying (*xmax* - *xmin*) or (*ymax* -
        *ymin*). Note this is slightly different than in MATLAB.::
        
          >>> axis('image')
        
        is 'scaled' with the axis limits equal to the data limits.::
        
          >>> axis('auto')
        
        and::
        
          >>> axis('normal')
        
        are deprecated. They restore default behavior; axis limits are automatically
        scaled to make the data fit comfortably within the plot box.
        
        if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
        as kwargs selectively to alter just those limits without changing
        the others.
        
          >>> axis('square')
        
        changes the limit ranges (*xmax*-*xmin*) and (*ymax*-*ymin*) of
        the *x* and *y* axes to be the same, and have the same scaling,
        resulting in a square plot.
        
        The xmin, xmax, ymin, ymax tuple is returned
        
        .. seealso::
        
            :func:`xlim`, :func:`ylim`
               For setting the x- and y-limits individually.
    
    aaxxvvlliinnee(x=0, ymin=0, ymax=1, hold=None, **kwargs)
        Add a vertical line across the axes.
        
        Parameters
        ----------
        x : scalar, optional, default: 0
            x position in data coordinates of the vertical line.
        
        ymin : scalar, optional, default: 0
            Should be between 0 and 1, 0 being the bottom of the plot, 1 the
            top of the plot.
        
        ymax : scalar, optional, default: 1
            Should be between 0 and 1, 0 being the bottom of the plot, 1 the
            top of the plot.
        
        Returns
        -------
        :class:`~matplotlib.lines.Line2D`
        
        
        Examples
        --------
        * draw a thick red vline at *x* = 0 that spans the yrange::
        
            >>> axvline(linewidth=4, color='r')
        
        * draw a default vline at *x* = 1 that spans the yrange::
        
            >>> axvline(x=1)
        
        * draw a default vline at *x* = .5 that spans the middle half of
          the yrange::
        
            >>> axvline(x=.5, ymin=0.25, ymax=0.75)
        
        Valid kwargs are :class:`~matplotlib.lines.Line2D` properties,
        with the exception of 'transform':
        
          agg_filter: unknown
          alpha: float (0.0 transparent through 1.0 opaque) 
          animated: [True | False] 
          antialiased or aa: [True | False] 
          axes: an :class:`~matplotlib.axes.Axes` instance 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          color or c: any matplotlib color 
          contains: a callable function 
          dash_capstyle: ['butt' | 'round' | 'projecting'] 
          dash_joinstyle: ['miter' | 'round' | 'bevel'] 
          dashes: sequence of on/off ink in points 
          drawstyle: ['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post'] 
          figure: a :class:`matplotlib.figure.Figure` instance 
          fillstyle: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none'] 
          gid: an id string 
          label: string or anything printable with '%s' conversion. 
          linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or lw: float value in points 
          marker: :mod:`A valid marker style <matplotlib.markers>`
          markeredgecolor or mec: any matplotlib color 
          markeredgewidth or mew: float value in points 
          markerfacecolor or mfc: any matplotlib color 
          markerfacecoloralt or mfcalt: any matplotlib color 
          markersize or ms: float 
          markevery: [None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]
          path_effects: unknown
          picker: float distance in points or callable pick function ``fn(artist, event)`` 
          pickradius: float distance in points 
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          solid_capstyle: ['butt' | 'round' |  'projecting'] 
          solid_joinstyle: ['miter' | 'round' | 'bevel'] 
          transform: a :class:`matplotlib.transforms.Transform` instance 
          url: a url string 
          visible: [True | False] 
          xdata: 1D array 
          ydata: 1D array 
          zorder: any number 
        
        See also
        --------
        axhspan : for example plot and source code
    
    aaxxvvssppaann(xmin, xmax, ymin=0, ymax=1, hold=None, **kwargs)
        Add a vertical span (rectangle) across the axes.
        
        Draw a vertical span (rectangle) from `xmin` to `xmax`.  With
        the default values of `ymin` = 0 and `ymax` = 1. This always
        spans the yrange, regardless of the ylim settings, even if you
        change them, e.g., with the :meth:`set_ylim` command.  That is,
        the vertical extent is in axes coords: 0=bottom, 0.5=middle,
        1.0=top but the y location is in data coordinates.
        
        Parameters
        ----------
        xmin : scalar
            Number indicating the first X-axis coordinate of the vertical
            span rectangle in data units.
        xmax : scalar
            Number indicating the second X-axis coordinate of the vertical
            span rectangle in data units.
        ymin : scalar, optional
            Number indicating the first Y-axis coordinate of the vertical
            span rectangle in relative Y-axis units (0-1). Default to 0.
        ymax : scalar, optional
            Number indicating the second Y-axis coordinate of the vertical
            span rectangle in relative Y-axis units (0-1). Default to 1.
        
        Returns
        -------
        rectangle : matplotlib.patches.Polygon
            Vertical span (rectangle) from (xmin, ymin) to (xmax, ymax).
        
        Other Parameters
        ----------------
        **kwargs
            Optional parameters are properties of the class
            matplotlib.patches.Polygon.
        
        See Also
        --------
        axhspan
        
        Examples
        --------
        Draw a vertical, green, translucent rectangle from x = 1.25 to
        x = 1.55 that spans the yrange of the axes.
        
        >>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)
    
    bbaarr(left, height, width=0.8, bottom=None, hold=None, data=None, **kwargs)
        Make a bar plot.
        
        Make a bar plot with rectangles bounded by:
        
          `left`, `left` + `width`, `bottom`, `bottom` + `height`
                (left, right, bottom and top edges)
        
        Parameters
        ----------
        left : sequence of scalars
            the x coordinates of the left sides of the bars
        
        height : sequence of scalars
            the heights of the bars
        
        width : scalar or array-like, optional
            the width(s) of the bars
            default: 0.8
        
        bottom : scalar or array-like, optional
            the y coordinate(s) of the bars
            default: None
        
        color : scalar or array-like, optional
            the colors of the bar faces
        
        edgecolor : scalar or array-like, optional
            the colors of the bar edges
        
        linewidth : scalar or array-like, optional
            width of bar edge(s). If None, use default
            linewidth; If 0, don't draw edges.
            default: None
        
        tick_label : string or array-like, optional
            the tick labels of the bars
            default: None
        
        xerr : scalar or array-like, optional
            if not None, will be used to generate errorbar(s) on the bar chart
            default: None
        
        yerr : scalar or array-like, optional
            if not None, will be used to generate errorbar(s) on the bar chart
            default: None
        
        ecolor : scalar or array-like, optional
            specifies the color of errorbar(s)
            default: None
        
        capsize : scalar, optional
           determines the length in points of the error bar caps
           default: None, which will take the value from the
           ``errorbar.capsize`` :data:`rcParam<matplotlib.rcParams>`.
        
        error_kw : dict, optional
            dictionary of kwargs to be passed to errorbar method. *ecolor* and
            *capsize* may be specified here rather than as independent kwargs.
        
        align : {'center', 'edge'}, optional
            If 'edge', aligns bars by their left edges (for vertical bars) and
            by their bottom edges (for horizontal bars). If 'center', interpret
            the `left` argument as the coordinates of the centers of the bars.
            To align on the align bars on the right edge pass a negative
            `width`.
        
        orientation : {'vertical',  'horizontal'}, optional
            The orientation of the bars.
        
        log : boolean, optional
            If true, sets the axis to be log scale.
            default: False
        
        Returns
        -------
        bars : matplotlib.container.BarContainer
            Container with all of the bars + errorbars
        
        Notes
        -----
        The optional arguments `color`, `edgecolor`, `linewidth`,
        `xerr`, and `yerr` can be either scalars or sequences of
        length equal to the number of bars.  This enables you to use
        bar as the basis for stacked bar charts, or candlestick plots.
        Detail: `xerr` and `yerr` are passed directly to
        :meth:`errorbar`, so they can also have shape 2xN for
        independent specification of lower and upper errors.
        
        Other optional kwargs:
        
          agg_filter: unknown
          alpha: float or None 
          animated: [True | False] 
          antialiased or aa: [True | False]  or None for default 
          axes: an :class:`~matplotlib.axes.Axes` instance 
          capstyle: ['butt' | 'round' | 'projecting'] 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          color: matplotlib color spec
          contains: a callable function 
          edgecolor or ec: mpl color spec, None, 'none', or 'auto' 
          facecolor or fc: mpl color spec, or None for default, or 'none' for no color 
          figure: a :class:`matplotlib.figure.Figure` instance 
          fill: [True | False] 
          gid: an id string 
          hatch: ['/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*'] 
          joinstyle: ['miter' | 'round' | 'bevel'] 
          label: string or anything printable with '%s' conversion. 
          linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or lw: float or None for default 
          path_effects: unknown
          picker: [None|float|boolean|callable] 
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          transform: :class:`~matplotlib.transforms.Transform` instance 
          url: a url string 
          visible: [True | False] 
          zorder: any number 
        
        See also
        --------
        barh: Plot a horizontal bar plot.
        
        Examples
        --------
        
        **Example:** A stacked bar chart.
        
        .. plot:: mpl_examples/pylab_examples/bar_stacked.py
        
        .. note::
            In addition to the above described arguments, this function can take a
            **data** keyword argument. If such a **data** argument is given, the
            following arguments are replaced by **data[<arg>]**:
        
            * All arguments with the following names: 'bottom', 'color', 'ecolor', 'edgecolor', 'height', 'left', 'linewidth', 'tick_label', 'width', 'xerr', 'yerr'.
    
    bbaarrbbss(*args, **kw)
        Plot a 2-D field of barbs.
        
        Call signatures::
        
          barb(U, V, **kw)
          barb(U, V, C, **kw)
          barb(X, Y, U, V, **kw)
          barb(X, Y, U, V, C, **kw)
        
        Arguments:
        
          *X*, *Y*:
            The x and y coordinates of the barb locations
            (default is head of barb; see *pivot* kwarg)
        
          *U*, *V*:
            Give the x and y components of the barb shaft
        
          *C*:
            An optional array used to map colors to the barbs
        
        All arguments may be 1-D or 2-D arrays or sequences. If *X* and *Y*
        are absent, they will be generated as a uniform grid.  If *U* and *V*
        are 2-D arrays but *X* and *Y* are 1-D, and if ``len(X)`` and ``len(Y)``
        match the column and row dimensions of *U*, then *X* and *Y* will be
        expanded with :func:`numpy.meshgrid`.
        
        *U*, *V*, *C* may be masked arrays, but masked *X*, *Y* are not
        supported at present.
        
        Keyword arguments:
        
          *length*:
            Length of the barb in points; the other parts of the barb
            are scaled against this.
            Default is 9
        
          *pivot*: [ 'tip' | 'middle' ]
            The part of the arrow that is at the grid point; the arrow rotates
            about this point, hence the name *pivot*.  Default is 'tip'
        
          *barbcolor*: [ color | color sequence ]
            Specifies the color all parts of the barb except any flags.  This
            parameter is analagous to the *edgecolor* parameter for polygons,
            which can be used instead. However this parameter will override
            facecolor.
        
          *flagcolor*: [ color | color sequence ]
            Specifies the color of any flags on the barb.  This parameter is
            analagous to the *facecolor* parameter for polygons, which can be
            used instead. However this parameter will override facecolor.  If
            this is not set (and *C* has not either) then *flagcolor* will be
            set to match *barbcolor* so that the barb has a uniform color. If
            *C* has been set, *flagcolor* has no effect.
        
          *sizes*:
            A dictionary of coefficients specifying the ratio of a given
            feature to the length of the barb. Only those values one wishes to
            override need to be included.  These features include:
        
                - 'spacing' - space between features (flags, full/half barbs)
        
                - 'height' - height (distance from shaft to top) of a flag or
                  full barb
        
                - 'width' - width of a flag, twice the width of a full barb
        
                - 'emptybarb' - radius of the circle used for low magnitudes
        
          *fill_empty*:
            A flag on whether the empty barbs (circles) that are drawn should
            be filled with the flag color.  If they are not filled, they will
            be drawn such that no color is applied to the center.  Default is
            False
        
          *rounding*:
            A flag to indicate whether the vector magnitude should be rounded
            when allocating barb components.  If True, the magnitude is
            rounded to the nearest multiple of the half-barb increment.  If
            False, the magnitude is simply truncated to the next lowest
            multiple.  Default is True
        
          *barb_increments*:
            A dictionary of increments specifying values to associate with
            different parts of the barb. Only those values one wishes to
            override need to be included.
        
                - 'half' - half barbs (Default is 5)
        
                - 'full' - full barbs (Default is 10)
        
                - 'flag' - flags (default is 50)
        
          *flip_barb*:
            Either a single boolean flag or an array of booleans.  Single
            boolean indicates whether the lines and flags should point
            opposite to normal for all barbs.  An array (which should be the
            same size as the other data arrays) indicates whether to flip for
            each individual barb.  Normal behavior is for the barbs and lines
            to point right (comes from wind barbs having these features point
            towards low pressure in the Northern Hemisphere.)  Default is
            False
        
        Barbs are traditionally used in meteorology as a way to plot the speed
        and direction of wind observations, but can technically be used to
        plot any two dimensional vector quantity.  As opposed to arrows, which
        give vector magnitude by the length of the arrow, the barbs give more
        quantitative information about the vector magnitude by putting slanted
        lines or a triangle for various increments in magnitude, as show
        schematically below::
        
         :     /\    \
         :    /  \    \
         :   /    \    \    \
         :  /      \    \    \
         : ------------------------------
        
        .. note the double \ at the end of each line to make the figure
        .. render correctly
        
        The largest increment is given by a triangle (or "flag"). After those
        come full lines (barbs). The smallest increment is a half line.  There
        is only, of course, ever at most 1 half line.  If the magnitude is
        small and only needs a single half-line and no full lines or
        triangles, the half-line is offset from the end of the barb so that it
        can be easily distinguished from barbs with a single full line.  The
        magnitude for the barb shown above would nominally be 65, using the
        standard increments of 50, 10, and 5.
        
        linewidths and edgecolors can be used to customize the barb.
        Additional :class:`~matplotlib.collections.PolyCollection` keyword
        arguments:
        
          agg_filter: unknown
          alpha: float or None 
          animated: [True | False] 
          antialiased or antialiaseds: Boolean or sequence of booleans 
          array: unknown
          axes: an :class:`~matplotlib.axes.Axes` instance 
          clim: a length 2 sequence of floats 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          cmap: a colormap or registered colormap name 
          color: matplotlib color arg or sequence of rgba tuples
          contains: a callable function 
          edgecolor or edgecolors: matplotlib color spec or sequence of specs 
          facecolor or facecolors: matplotlib color spec or sequence of specs 
          figure: a :class:`matplotlib.figure.Figure` instance 
          gid: an id string 
          hatch: [ '/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ] 
          label: string or anything printable with '%s' conversion. 
          linestyle or dashes or linestyles: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or linewidths or lw: float or sequence of floats 
          norm: unknown
          offset_position: unknown
          offsets: float or sequence of floats 
          path_effects: unknown
          picker: [None|float|boolean|callable] 
          pickradius: unknown
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          transform: :class:`~matplotlib.transforms.Transform` instance 
          url: a url string 
          urls: unknown
          visible: [True | False] 
          zorder: any number 
        
        
        **Example:**
        
        .. plot:: mpl_examples/pylab_examples/barb_demo.py
        
        .. note::
            In addition to the above described arguments, this function can take a
            **data** keyword argument. If such a **data** argument is given, the
            following arguments are replaced by **data[<arg>]**:
        
            * All positional and all keyword arguments.
    
    bbaarrhh(bottom, width, height=0.8, left=None, hold=None, **kwargs)
        Make a horizontal bar plot.
        
        Make a horizontal bar plot with rectangles bounded by:
        
          `left`, `left` + `width`, `bottom`, `bottom` + `height`
                (left, right, bottom and top edges)
        
        `bottom`, `width`, `height`, and `left` can be either scalars
        or sequences
        
        Parameters
        ----------
        bottom : scalar or array-like
            the y coordinate(s) of the bars
        
        width : scalar or array-like
            the width(s) of the bars
        
        height : sequence of scalars, optional, default: 0.8
            the heights of the bars
        
        left : sequence of scalars
            the x coordinates of the left sides of the bars
        
        Returns
        -------
        `matplotlib.patches.Rectangle` instances.
        
        Other parameters
        ----------------
        color : scalar or array-like, optional
            the colors of the bars
        
        edgecolor : scalar or array-like, optional
            the colors of the bar edges
        
        linewidth : scalar or array-like, optional, default: None
            width of bar edge(s). If None, use default
            linewidth; If 0, don't draw edges.
        
        tick_label : string or array-like, optional, default: None
            the tick labels of the bars
        
        xerr : scalar or array-like, optional, default: None
            if not None, will be used to generate errorbar(s) on the bar chart
        
        yerr : scalar or array-like, optional, default: None
            if not None, will be used to generate errorbar(s) on the bar chart
        
        ecolor : scalar or array-like, optional, default: None
            specifies the color of errorbar(s)
        
        capsize : scalar, optional
           determines the length in points of the error bar caps
           default: None, which will take the value from the
           ``errorbar.capsize`` :data:`rcParam<matplotlib.rcParams>`.
        
        error_kw :
            dictionary of kwargs to be passed to errorbar method. `ecolor` and
            `capsize` may be specified here rather than as independent kwargs.
        
        align : {'center', 'edge'}, optional
            If 'edge', aligns bars by their left edges (for vertical
            bars) and by their bottom edges (for horizontal bars). If
            'center', interpret the `bottom` argument as the
            coordinates of the centers of the bars.  To align on the
            align bars on the top edge pass a negative 'height'.
        
        log : boolean, optional, default: False
            If true, sets the axis to be log scale
        
        Notes
        -----
        The optional arguments `color`, `edgecolor`, `linewidth`,
        `xerr`, and `yerr` can be either scalars or sequences of
        length equal to the number of bars.  This enables you to use
        bar as the basis for stacked bar charts, or candlestick plots.
        Detail: `xerr` and `yerr` are passed directly to
        :meth:`errorbar`, so they can also have shape 2xN for
        independent specification of lower and upper errors.
        
        Other optional kwargs:
        
          agg_filter: unknown
          alpha: float or None 
          animated: [True | False] 
          antialiased or aa: [True | False]  or None for default 
          axes: an :class:`~matplotlib.axes.Axes` instance 
          capstyle: ['butt' | 'round' | 'projecting'] 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          color: matplotlib color spec
          contains: a callable function 
          edgecolor or ec: mpl color spec, None, 'none', or 'auto' 
          facecolor or fc: mpl color spec, or None for default, or 'none' for no color 
          figure: a :class:`matplotlib.figure.Figure` instance 
          fill: [True | False] 
          gid: an id string 
          hatch: ['/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*'] 
          joinstyle: ['miter' | 'round' | 'bevel'] 
          label: string or anything printable with '%s' conversion. 
          linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or lw: float or None for default 
          path_effects: unknown
          picker: [None|float|boolean|callable] 
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          transform: :class:`~matplotlib.transforms.Transform` instance 
          url: a url string 
          visible: [True | False] 
          zorder: any number 
        
        See also
        --------
        bar: Plot a vertical bar plot.
    
    bboonnee()
        set the default colormap to bone and apply to current image if any.
        See help(colormaps) for more information
    
    bbooxx(on=None)
        Turn the axes box on or off.  *on* may be a boolean or a string,
        'on' or 'off'.
        
        If *on* is *None*, toggle state.
    
    bbooxxpplloott(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_xticks=True, autorange=False, zorder=None, hold=None, data=None)
        Make a box and whisker plot.
        
        Make a box and whisker plot for each column of ``x`` or each
        vector in sequence ``x``.  The box extends from the lower to
        upper quartile values of the data, with a line at the median.
        The whiskers extend from the box to show the range of the
        data.  Flier points are those past the end of the whiskers.
        
        Parameters
        ----------
        x : Array or a sequence of vectors.
            The input data.
        
        notch : bool, optional (False)
            If `True`, will produce a notched box plot. Otherwise, a
            rectangular boxplot is produced. The notches represent the
            confidence interval (CI) around the median. See the entry
            for the ``bootstrap`` parameter for information regarding
            how the locations of the notches are computed.
        
            .. note::
        
                In cases where the values of the CI are less than the
                lower quartile or greater than the upper quartile, the
                notches will extend beyond the box, giving it a
                distinctive "flipped" appearance. This is expected
                behavior and consistent with other statistical
                visualization packages.
        
        sym : str, optional
            The default symbol for flier points. Enter an empty string
            ('') if you don't want to show fliers. If `None`, then the
            fliers default to 'b+'  If you want more control use the
            flierprops kwarg.
        
        vert : bool, optional (True)
            If `True` (default), makes the boxes vertical. If `False`,
            everything is drawn horizontally.
        
        whis : float, sequence, or string (default = 1.5)
            As a float, determines the reach of the whiskers to the beyond the
            first and third quartiles. In other words, where IQR is the
            interquartile range (`Q3-Q1`), the upper whisker will extend to
            last datum less than `Q3 + whis*IQR`). Similarly, the lower whisker
            will extend to the first datum greater than `Q1 - whis*IQR`.
            Beyond the whiskers, data
            are considered outliers and are plotted as individual
            points. Set this to an unreasonably high value to force the
            whiskers to show the min and max values. Alternatively, set
            this to an ascending sequence of percentile (e.g., [5, 95])
            to set the whiskers at specific percentiles of the data.
            Finally, ``whis`` can be the string ``'range'`` to force the
            whiskers to the min and max of the data.
        
        bootstrap : int, optional
            Specifies whether to bootstrap the confidence intervals
            around the median for notched boxplots. If ``bootstrap`` is
            None, no bootstrapping is performed, and notches are
            calculated using a Gaussian-based asymptotic approximation
            (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and
            Kendall and Stuart, 1967). Otherwise, bootstrap specifies
            the number of times to bootstrap the median to determine its
            95% confidence intervals. Values between 1000 and 10000 are
            recommended.
        
        usermedians : array-like, optional
            An array or sequence whose first dimension (or length) is
            compatible with ``x``. This overrides the medians computed
            by matplotlib for each element of ``usermedians`` that is not
            `None`. When an element of ``usermedians`` is None, the median
            will be computed by matplotlib as normal.
        
        conf_intervals : array-like, optional
            Array or sequence whose first dimension (or length) is
            compatible with ``x`` and whose second dimension is 2. When
            the an element of ``conf_intervals`` is not None, the
            notch locations computed by matplotlib are overridden
            (provided ``notch`` is `True`). When an element of
            ``conf_intervals`` is `None`, the notches are computed by the
            method specified by the other kwargs (e.g., ``bootstrap``).
        
        positions : array-like, optional
            Sets the positions of the boxes. The ticks and limits are
            automatically set to match the positions. Defaults to
            `range(1, N+1)` where N is the number of boxes to be drawn.
        
        widths : scalar or array-like
            Sets the width of each box either with a scalar or a
            sequence. The default is 0.5, or ``0.15*(distance between
            extreme positions)``, if that is smaller.
        
        patch_artist : bool, optional (False)
            If `False` produces boxes with the Line2D artist. Otherwise,
            boxes and drawn with Patch artists.
        
        labels : sequence, optional
            Labels for each dataset. Length must be compatible with
            dimensions  of ``x``.
        
        manage_xticks : bool, optional (True)
            If the function should adjust the xlim and xtick locations.
        
        autorange : bool, optional (False)
            When `True` and the data are distributed such that the  25th and
            75th percentiles are equal, ``whis`` is set to ``'range'`` such
            that the whisker ends are at the minimum and maximum of the
            data.
        
        meanline : bool, optional (False)
            If `True` (and ``showmeans`` is `True`), will try to render
            the mean as a line spanning the full width of the box
            according to ``meanprops`` (see below). Not recommended if
            ``shownotches`` is also True. Otherwise, means will be shown
            as points.
        
        zorder : scalar, optional (None)
            Sets the zorder of the boxplot.
        
        Other Parameters
        ----------------
        showcaps : bool, optional (True)
            Show the caps on the ends of whiskers.
        showbox : bool, optional (True)
            Show the central box.
        showfliers : bool, optional (True)
            Show the outliers beyond the caps.
        showmeans : bool, optional (False)
            Show the arithmetic means.
        capprops : dict, optional (None)
            Specifies the style of the caps.
        boxprops : dict, optional (None)
            Specifies the style of the box.
        whiskerprops : dict, optional (None)
            Specifies the style of the whiskers.
        flierprops : dict, optional (None)
            Specifies the style of the fliers.
        medianprops : dict, optional (None)
            Specifies the style of the median.
        meanprops : dict, optional (None)
            Specifies the style of the mean.
        
        Returns
        -------
        result : dict
          A dictionary mapping each component of the boxplot to a list
          of the :class:`matplotlib.lines.Line2D` instances
          created. That dictionary has the following keys (assuming
          vertical boxplots):
        
          - ``boxes``: the main body of the boxplot showing the
            quartiles and the median's confidence intervals if
            enabled.
        
          - ``medians``: horizontal lines at the median of each box.
        
          - ``whiskers``: the vertical lines extending to the most
            extreme, non-outlier data points.
        
          - ``caps``: the horizontal lines at the ends of the
            whiskers.
        
          - ``fliers``: points representing data that extend beyond
            the whiskers (fliers).
        
          - ``means``: points or lines representing the means.
        
        Examples
        --------
        .. plot:: mpl_examples/statistics/boxplot_demo.py
        
        .. note::
            In addition to the above described arguments, this function can take a
            **data** keyword argument. If such a **data** argument is given, the
            following arguments are replaced by **data[<arg>]**:
        
            * All positional and all keyword arguments.
    
    bbrrookkeenn__bbaarrhh(xranges, yrange, hold=None, data=None, **kwargs)
        Plot horizontal bars.
        
        A collection of horizontal bars spanning *yrange* with a sequence of
        *xranges*.
        
        Required arguments:
        
          =========   ==============================
          Argument    Description
          =========   ==============================
          *xranges*   sequence of (*xmin*, *xwidth*)
          *yrange*    sequence of (*ymin*, *ywidth*)
          =========   ==============================
        
        kwargs are
        :class:`matplotlib.collections.BrokenBarHCollection`
        properties:
        
          agg_filter: unknown
          alpha: float or None 
          animated: [True | False] 
          antialiased or antialiaseds: Boolean or sequence of booleans 
          array: unknown
          axes: an :class:`~matplotlib.axes.Axes` instance 
          clim: a length 2 sequence of floats 
          clip_box: a :class:`matplotlib.transforms.Bbox` instance 
          clip_on: [True | False] 
          clip_path: [ (:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`) | :class:`~matplotlib.patches.Patch` | None ] 
          cmap: a colormap or registered colormap name 
          color: matplotlib color arg or sequence of rgba tuples
          contains: a callable function 
          edgecolor or edgecolors: matplotlib color spec or sequence of specs 
          facecolor or facecolors: matplotlib color spec or sequence of specs 
          figure: a :class:`matplotlib.figure.Figure` instance 
          gid: an id string 
          hatch: [ '/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ] 
          label: string or anything printable with '%s' conversion. 
          linestyle or dashes or linestyles: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
          linewidth or linewidths or lw: float or sequence of floats 
          norm: unknown
          offset_position: unknown
          offsets: float or sequence of floats 
          path_effects: unknown
          picker: [None|float|boolean|callable] 
          pickradius: unknown
          rasterized: [True | False | None] 
          sketch_params: unknown
          snap: unknown
          transform: :class:`~matplotlib.transforms.Transform` instance 
          url: a url string 
          urls: unknown
          visible: [True | False] 
          zorder: any number 
        
        these can either be a single argument, i.e.,::
        
          facecolors = 'black'
        
        or a sequence of arguments for the various bars, i.e.,::
        
          facecolors = ('black', 'red', 'green')
        
        **Example:**
        
        .. plot:: mpl_examples/pylab_examples/broken_barh.py
        
        .. note::
            In addition to the above described arguments, this function can take a
            **data** keyword argument. If such a **data** argument is given, the
            following arguments are replaced by **data[<arg>]**:
        
            * All positional and all keyword arguments.
    
    ccllaa()
        Clear the current axes.
    
    ccllaabbeell(CS, *args, **kwargs)
        Label a contour plot.
        
        Call signature::
        
          clabel(cs, **kwargs)
        
        Adds labels to line contours in *cs*, where *cs* is a
        :class:`~matplotlib.contour.ContourSet` object returned by
        contour.
        
        ::
        
          clabel(cs, v, **kwargs)
        
        only labels contours listed in *v*.
        
        Optional keyword arguments:
        
          *fontsize*:
            size in points or relative size e.g., 'smaller', 'x-large'
        
          *colors*:
            - if *None*, the color of each label matches the color of
              the corresponding contour
        
            - if one string color, e.g., *colors* = 'r' or *colors* =
              'red', all labels will be plotted in this color
        
            - if a tuple of matplotlib color args (string, float, rgb, etc),
              different labels will be plotted in different colors in the order
              specified
        
          *inline*:
            controls whether the underlying contour is removed or
            not. Default is *True*.
        
          *inline_spacing*:
            space in pixels to leave on each side of label when
            placing inline.  Defaults to 5.  This spacing will be
            exact for labels at locations where the contour is
            straight, less so for labels on curved contours.
        
          *fmt*:
            a format string for the label. Default is '%1.3f'
            Alternatively, this can be a dictionary matching contour
            levels with arbitrary strings to use for each contour level
            (i.e., fmt[level]=string), or it can be any callable, such
            as a :class:`~matplotlib.ticker.Formatter` instance, that
            returns a string when called with a numeric contour level.
        
          *manual*:
            if *True*, contour labels will be placed manually using
            mouse clicks.  Click the first button near a contour to
            add a label, click the second button (or potentially both
            mouse buttons at once) to finish adding labels.  The third
            button can be used to remove the last label added, but
            only if labels are not inline.  Alternatively, the keyboard
            can be used to select label locations (enter to end label
            placement, delete or backspace act like the third mouse button,
            and any other key will select a label location).
        
            *manual* can be an iterable object of x,y tuples. Contour labels
            will be created as if mouse is clicked at each x,y positions.
        
          *rightside_up*:
            if *True* (default), label rotations will always be plus
            or minus 90 degrees from level.
        
          *use_clabeltext*:
            if *True* (default is False), ClabelText class (instead of
            matplotlib.Text) is used to create labels. ClabelText
            recalculates rotation angles of texts during the drawing time,
            therefore this can be used if aspect of the axes changes.
        
        .. plot:: mpl_examples/pylab_examples/contour_demo.py
    
    ccllff()
        Clear the current figure.
    
    cclliimm(vmin=None, vmax=None)
        Set the color limits of the current image.
        
        To apply clim to all axes images do::
        
          clim(0, 0.5)
        
        If either *vmin* or *vmax* is None, the image min/max respectively
        will be used for color scaling.
        
        If you want to set the clim of multiple images,
        use, for example::
        
          for im in gca().get_images():
              im.set_clim(0, 0.05)
    
    cclloossee(*args)
        Close a figure window.
        
        ``close()`` by itself closes the current figure
        
        ``close(h)`` where *h* is a :class:`Figure` instance, closes that figure
        
        ``close(num)`` closes figure number *num*
        
        ``close(name)`` where *name* is a string, closes figure with that label
        
        ``close('all')`` closes all the figure windows
    
    ccoohheerree(x,